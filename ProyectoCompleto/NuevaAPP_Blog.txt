VAMOS A CREAR UNA APP DENTRO DE ESTA APP QUE ASI PODREMOS REUTILIZAR
1- Abrimos la terminal y escribimos python manage.py starapp blog
2- Abrimos el archivo setting y en INSTALLED_APPS añadimos 'blog',
3- Abrimos el archivo models.py de blog y creamos las clases para que nos haga las tablas
class Categoria(models.Model):
    nombre=models.CharField(max_length=50)
    created=models.DateTimeField(auto_now_add=True)
    updated=models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name='categoria'
        verbose_name_plural='categorias'
    
    def __str__(self):
        return self.nombre
4- Debemos hacer otra clase para los Post como vamos a usar los usuarios para que nos haga relaciones entre tablas debemos importarla
from django.contrib.auth.models import User
5- python manage.py makemigrations (Para usar imagenes hay que instalar pip install Pillow)
6- python manage.py migrate
7- Para agregar servicio a la pagina admin tenemos que abrir el archivo admin from .models import Categoria, Post
8- Para que salgan created y updated debemos crear una clase de solo lectura
class CategoriaAdmin(admin.ModelAdmin):
    readonly_fields=('created', 'updated')

class PostAdmin(admin.ModelAdmin):
    readonly_fields=('created', 'updated')

9- Y poner bajo esto admin.site.register(Categoria, CategoriaAdmin)
		     admin.site.register(Post, PostAdmin)
10- Creamos la carpeta templates dentro de blog y otra subcarpeta llamada blog dentro y movemos el archivo blog.html
11- Cortamos del views.py el metodo de blog y lo pegamos en el views.py de blog
def blog(request):
    return render(request, "blog/blog.html")
12- Creamos un nuevo archivo urls.py dentro de blog y copiamos lo siguiente
from django.urls import path
from . import views


urlpatterns = [
    path('', views.blog, name="Blog"),
    
]
13- Debemos borrar el path del archivo urls.py de ProyectoWebApp
14- Añadimos en el archivo urls.py de ProyectoWeb path('blog', include('blog.urls')),
15- Abrimos el views e importamos from blog.models import Post
def blog(request):
    posts=Post.objects.all()
    return render(request, "blog/blog.html", {"posts":posts})
16- Ya solo nos queda copiar el html de servicios y adaptarlo al blog cambiando donde ponga servicio por post
AÑADIR LAS CATEGORIAS EN LA WEB
1- Debemos ver donde queremos que nos salgan estas categorias y añadir este codigo
<section>
      <div style="width: 75%; margin: auto; text-align: center; color: white;">
        Categorias: 
        {% for post in posts %}
            {% for categoria in post.categorias.all %}
              {{categoria.nombre}} &nbsp;&nbsp;&nbsp;
            {% endfor %}
        {% endfor %}
      </div>
    </section>
DARLE CLICK A UNA CATEGORIA Y QUE TE LLEVE A TODOS LOS POSTS DE ESA CATEGORIA
1- Copiamos el html blog y lo pegamos y le cambiamos el nombre a categorias
2- Abrimos el archivo urls.py y añadimos un nuevo path('/categoria/<int:categoria_id>/', views.categoria, name="categoria"),
3- Abrimos el views y debemos crear un nuevo metodo e importar from blog.models import Post, Categoria
def categoria(request, categoria_id):
    categoria=Categoria.objects.get(id=categoria_id)
    posts=Post.objects.filter(categorias=categoria)
    return render(request, "blog/categoria.html", {'categoria':categoria,"posts":posts})
4- Añadimos en el archivo html de blog 
<a href="{% url 'categoria' categoria.id %}">{{categoria.nombre}}</a> &nbsp;&nbsp;&nbsp;
5- Si queremos darle css para color seria asi
<a href="{% url 'categoria' categoria.id %}" style="color: white !important; text-decoration: underline;">{{categoria.nombre}}</a> &nbsp;&nbsp;&nbsp;
6- Para hacer que nos salga luminoso blog dentro de las categorias debemos añadir en el archivo base.html |slice:':5' despues del path